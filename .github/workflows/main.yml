name: Build and Release

on:
  push:
    tags: ['v*.*.*']
  pull_request:
    branches: [main]
  workflow_dispatch:
jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            artifact_name: macos
            output_name: pyping-macos
          - os: ubuntu-latest
            artifact_name: linux
            output_name: pyping-linux
          - os: windows-latest
            artifact_name: windows
            output_name: pyping-windows.exe

    runs-on: ${{ matrix.os }}

    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          architecture: 'x64'
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Executable
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: stable
          script-name: pyping.py
          onefile: true
          standalone: true
          linux-keep-scons: false
          windows-disable-console: false
          macos-create-app-bundle: false
          macos-target-arch: universal2
          output-dir: dist
          output-filename: ${{ matrix.output_name }}

      - name: Verify build output
        run: |
          echo "Checking dist directory contents:"
          ls -la dist
          if [ ! -f "dist/${{ matrix.output_name }}" ]; then
            echo "ERROR: Build output not found!"
            exit 1
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-build
          path: dist/${{ matrix.output_name }}
          retention-days: 3

  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: '*-build'
          merge-multiple: true

      - name: Get version from tag
        id: get-version
        run: |
          version=${GITHUB_REF#refs/tags/v}
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          name: "PyPing ${{ steps.get-version.outputs.version }}"
          body: |
            ### Multi-platform Build
            
            - **Windows**: pyping-windows.exe
            - **macOS**: pyping-macos
            - **Linux**: pyping-linux
            
            ### Verification
            
            ```sh
            shasum -a 256 <file>
            ```
          files: |
            artifacts/*
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
