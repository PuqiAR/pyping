name: Build and Release

on:
  push:
    tags: ['v*.*.*']
  workflow_dispatch:

env:
  UPX_VERSION: "4.2.1"
  PROJECT_NAME: "pyping"

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]
        python-version: ["3.10"]
        include:
          - os: ubuntu-22.04
            platform: linux-x64
            ext: ""
          - os: macos-12
            platform: macos-universal
            ext: ""
          - os: windows-2022
            platform: windows-x64
            ext: ".exe"
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install UPX (Linux)
      if: runner.os == 'Linux'
      run: |
        wget https://github.com/upx/upx/releases/download/v$UPX_VERSION/upx-$UPX_VERSION-amd64_linux.tar.xz
        tar -xf upx-*.tar.xz
        echo "$PWD/upx-$UPX_VERSION-amd64_linux" >> $GITHUB_PATH

    - name: Install UPX (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://github.com/upx/upx/releases/download/v$UPX_VERSION/upx-$UPX_VERSION-win64.zip" -OutFile upx.zip
        Expand-Archive upx.zip -DestinationPath .
        echo "$PWD/upx-$UPX_VERSION-win64" >> $env:GITHUB_PATH

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka==2.0.0
        pip install -r requirements.txt

    - name: Build with Nuitka (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        output_name="$PROJECT_NAME-${{ matrix.platform }}${{ matrix.ext }}"
        python -m nuitka \
          --standalone \
          --onefile \
          --follow-imports \
          --remove-output \
          --output-filename="$output_name" \
          --plugin-enable=upx \
          --lto=yes \
          pyping.py

    - name: Build with Nuitka (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $output_name = "$PROJECT_NAME-${{ matrix.platform }}${{ matrix.ext }}"
        python -m nuitka `
          --standalone `
          --onefile `
          --follow-imports `
          --remove-output `
          --output-filename="$output_name" `
          --plugin-enable=upx `
          --lto=yes `
          pyping.py

    - name: Create checksum (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        mkdir -p dist
        cd dist
        shasum -a 256 * > checksums.txt
        cat checksums.txt

    - name: Create checksum (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        mkdir dist -Force
        cd dist
        Get-ChildItem | ForEach-Object {
          $hash = (Get-FileHash $_ -Algorithm SHA256).Hash
          "$($_.Name)  $hash" | Out-File -Append checksums.txt
        }
        Get-Content checksums.txt

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}
        path: dist/*
        retention-days: 3

  create-release:
    needs: build
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: "$PROJECT_NAME ${{ github.ref_name }}"
        body: |
          ### Build Artifacts
          - **Windows**: $PROJECT_NAME-windows-x64.exe
          - **macOS**: $PROJECT_NAME-macos-universal
          - **Linux**: $PROJECT_NAME-linux-x64
        files: |
          artifacts/**/*
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
