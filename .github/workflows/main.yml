name: Build and Release

on:
  push:
    tags: ['v*.*.*']  # Trigger on version tags
  workflow_dispatch:   # Manual trigger
    inputs:
      version_tag:
        description: 'Version tag (e.g. v1.0.0), leave empty for test build'
        required: false
        default: ''

env:
  PROJECT_NAME: "pyping"

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022]
        python-version: ["3.10"]
        include:
          - os: ubuntu-22.04
            platform: linux-x64
            ext: ""
          - os: windows-2022
            platform: windows-x64
            ext: ".exe"
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4

    # Step to determine version (fixed bash syntax)
    - name: Determine version
      id: version
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.version_tag }}" ]]; then
          # Manual trigger with version specified
          VERSION="${输入版本_tag//v/}"  # Remove 'v' prefix
        elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          # Automatic tag trigger
          VERSION="${GITHUB_REF#refs/tags/v}"
        else
          # Manual trigger without version
          VERSION="0.0.0"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Using version: ${VERSION}"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka==2.0.0
        pip install -r requirements.txt

    # Linux build - no .bin suffix
    - name: Linux Build
      if: runner.os == 'Linux'
      run: |
        mkdir -p dist
        VERSION="${{ steps.version.outputs.version }}"
        output_name="pyping-linux-x64-$VERSION"
        echo "Building $output_name"
        
        python -m nuitka \
          --standalone \
          --onefile \
          --follow-imports \
          --remove-output \
          --lto=yes \
          --assume-yes-for-downloads \
          --output-dir=dist \
          --output-filename="$output_name" \
          pyping.py
        
        echo "Verifying build:"
        ls -la dist
        if [ -f "dist/$output_name" ]; then
          echo "Build successful"
          # Make executable
          chmod +x "dist/$output_name"
        else
          echo "Build failed"
          exit 1
        fi
        
        cd dist
        shasum -a 256 * > checksums.txt
        cat checksums.txt

    # Windows build
    - name: Windows Build
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path dist
        $VERSION = "${{ steps.version.outputs.version }}"
        $output_name = "pyping-windows-x64-$VERSION.exe"
        Write-Host "Building $output_name"
        
        python -m nuitka `
          --standalone `
          --onefile `
          --follow-imports `
          --remove-output `
          --lto=yes `
          --assume-yes-for-downloads `
          --output-dir=dist `
          --output-filename="$output_name" `
          pyping.py
        
        Write-Host "Verifying build:"
        Get-ChildItem -Path dist
        if (Test-Path -Path "dist\$output_name") {
          Write-Host "Build successful"
        } else {
          Write-Host "Build failed"
          exit 1
        }
        
        Set-Location dist
        Get-ChildItem | ForEach-Object {
          $hash = (Get-FileHash $_ -Algorithm SHA256).Hash
          "$($_.Name)  $hash" | Out-File -Append checksums.txt
        }
        Get-Content checksums.txt

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}
        path: dist/
        retention-days: 3

  create-release:
    needs: build
    # Only create release for tag pushes
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: "*"
        merge-multiple: true

    - name: Get release version
      id: release-version
      shell: bash
      run: |
        VERSION="${GITHUB_REF#refs/tags/v}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: "PyPing ${{ steps.release-version.outputs.version }}"
        body: |
          ### Build Artifacts
          - **Windows**: pyping-windows-x64-${{ steps.release-version.outputs.version }}.exe
          - **Linux**: pyping-linux-x64-${{ steps.release-version.outputs.version }}
          
          ### Verification
          ```sh
          # Linux
          shasum -a 256 <file>
          
          # Windows
          certutil -hashfile <file> SHA256
          ```
        files: |
          artifacts/**/*
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}